// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.lib;

import java.util.function.Function;

import com.pathplanner.lib.auto.AutoBuilder;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.sysid.SysIdRoutine;
import edu.wpi.first.wpilibj2.command.sysid.SysIdRoutine.Direction;

/** Add your docs here. */
public class AutoManager {
    private static final String Characterization_MODE_KEY = "CharacterizationMode";

    private static SendableChooser<Command> autoChooser;
    private static final SendableChooser<Command> characterizationChooser;

    static {
        SmartDashboard.putBoolean(Characterization_MODE_KEY, false);
        characterizationChooser = new SendableChooser<Command>();
        characterizationChooser.setDefaultOption("None", Commands.none());
        autoChooser = new SendableChooser<Command>();
    }
    public static void initSmartDashboard() {
        SmartDashboard.putData("AutoChooser",autoChooser);
        SmartDashboard.putData("CharacterizationChooser", characterizationChooser);
    }
    /**
     * Use an existing autoChooser, like the one generated by PathPlanner {@link AutoBuilder.buildAutoChooser} 
     * @param autoChooser
     */
    public static void useExistingAutoChooser(SendableChooser<Command> autoChooser) {
        AutoManager.autoChooser = autoChooser;
        AutoBuilder.buildAutoChooser();
    }

    /**
     * Add a Characterization Command to the choosable list on the dashboard 
     * @param name The name of the entry 
     * @param command the command
     */
    public static void addCharacterization(String name, Command command) {
            characterizationChooser.addOption(name, command);
    }
    /**
     * Adds all 4 SysId command of a routine to the choosable list on the dashboard.
     * @param name The name of the routine, seen on the dashboard 
     * @param map Function to map each command to. Could be used to add before and after commands. 
     * @param routine The SysID routine
     */
    public static void addSysidCharacterization(String name, Function<Command,Command> map, SysIdRoutine routine) {
            addCharacterization(name+" Dynamic Forward", map.apply(routine.dynamic(Direction.kForward)));
            addCharacterization(name+" Dynamic Reverse", map.apply(routine.dynamic(Direction.kReverse)));
            addCharacterization(name+" Quasistatic Forward", map.apply(routine.quasistatic(Direction.kForward)));
            addCharacterization(name+" Quasistatic Reverse", map.apply(routine.quasistatic(Direction.kReverse)));
    }
    /**
     * Adds all 4 SysId command of a routine to the choosable list on the dashboard.
     * @param name The name of the routine, seen on the dashboard 
     * @param routine The SysID routine
     */
    public static void addSysidCharacterization(String name, SysIdRoutine routine) { 
            addSysidCharacterization(name, c-> c, routine);
    }
    public static Command getSelected() {
        boolean characterization = SmartDashboard.getBoolean(Characterization_MODE_KEY,false);
        if (characterization) {
            return characterizationChooser.getSelected();
        } else {
            return autoChooser.getSelected();
        }
    }

    

}
