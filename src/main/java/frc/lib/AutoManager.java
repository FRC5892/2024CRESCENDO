// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.lib;

import java.util.function.Function;

import com.pathplanner.lib.auto.AutoBuilder;

import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.util.sendable.SendableBuilder;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.sysid.SysIdRoutine;
import edu.wpi.first.wpilibj2.command.sysid.SysIdRoutine.Direction;
import monologue.Logged;
import monologue.Annotations.Log;

/** Add your docs here. */
public class AutoManager implements Logged {

    @Log private static SendableChooser<Command> autoChooser;
    @Log private static final SendableChooser<Command> characterizationChooser;

    // Default to FMS mode. I really, REALLY, don't want to run a characterization routine on the field.
    private static boolean isFMSConnected = true;
    

    public static boolean characterizationMode;
    @Log(key = "selector") private Sendable modeSendable= new Sendable() {
            public void initSendable(SendableBuilder builder) {
                builder.addBooleanProperty("characterizationMode",()->characterizationMode , (b)->characterizationMode=b);
            }};
    static {
        characterizationChooser = new SendableChooser<Command>();
        characterizationChooser.setDefaultOption("None", Commands.none());
        autoChooser = new SendableChooser<Command>();
        autoChooser.addOption("NO OP", Commands.none());
    }
    /**
     * Use an existing autoChooser, like the one generated by PathPlanner {@link AutoBuilder.buildAutoChooser}
     * @param autoChooser
     */
    public static void useExistingAutoChooser(SendableChooser<Command> autoChooser) {
        AutoManager.autoChooser = autoChooser;
        AutoBuilder.buildAutoChooser();
    }

    /**
     * Add a Characterization Command to the choosable list on the dashboard
     * @param name The name of the entry
     * @param command the command
     */
    public static void addCharacterization(String name, Command command) {
            characterizationChooser.addOption(name, command);
    }
    /**
     * Adds all 4 SysId command of a routine to the choosable list on the dashboard.
     * @param name The name of the routine, seen on the dashboard
     * @param map Function to map each command to. Could be used to add before and after commands.
     * @param routine The SysID routine
     */
    public static void addSysidCharacterization(String name, Function<Command,Command> map, SysIdRoutine routine) {
            addCharacterization(name+" Dynamic Forward", map.apply(routine.dynamic(Direction.kForward)));
            addCharacterization(name+" Dynamic Reverse", map.apply(routine.dynamic(Direction.kReverse)));
            addCharacterization(name+" Quasistatic Forward", map.apply(routine.quasistatic(Direction.kForward)));
            addCharacterization(name+" Quasistatic Reverse", map.apply(routine.quasistatic(Direction.kReverse)));
    }
    /**
     * Adds all 4 SysId command of a routine to the choosable list on the dashboard.
     * @param name The name of the routine, seen on the dashboard
     * @param routine The SysID routine
     */
    public static void addSysidCharacterization(String name, SysIdRoutine routine) {
            addSysidCharacterization(name, c-> c, routine);
    }
    /**
     * Checks if the FMS is attached
     * <p> If the FMS is found, Characterization mode will be forcefully disabled, the switch will do nothing
     */
    public static void checkForFMS() {
        isFMSConnected = DriverStation.isFMSAttached();
    }
    public static Command getSelected() {
        if (!isFMSConnected && characterizationMode) {
            return characterizationChooser.getSelected();
        } else {
            return autoChooser.getSelected();
        }

    }



}
